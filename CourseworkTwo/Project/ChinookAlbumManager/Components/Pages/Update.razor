@page "/update/{AlbumId:int}"
@using AlbumDetails
@using Microsoft.EntityFrameworkCore
@inject ChinookContext ChinookContext
@inject NavigationManager NavigationManager

<h3>Update Album</h3>

<EditForm Model="@album" OnValidSubmit="@HandleValidSubmit">
    <!-- Album Title -->
    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText id="Title" class="form-control" @bind-Value="@album!.Title" />
    </div>

    <!-- Artist Selection -->
    <div class="mb-3">
        <label for="ArtistId" class="form-label">Artist</label>
        <InputSelect id="ArtistId" class="form-select" @bind-Value="@album!.ArtistId">
            @foreach (var artist in artists)
            {
                <option value="@artist.ArtistId">@artist.Name</option>
            }
        </InputSelect>
    </div>

    <!-- Track List -->
    <h4>Tracks</h4>
    <ul>
        @if (tracks != null)
        {
            @foreach (var track in tracks)
            {
                <li class="mb-2">
                    <input class="form-control d-inline w-75" @bind="track.Name" placeholder="Track Name" />
                    <button type="button" class="btn btn-danger ms-2" @onclick="() => RemoveTrack(track)">Remove</button>
                </li>
            }
        }
    </ul>
    <button type="button" class="btn btn-secondary mt-2" @onclick="AddTrack">Add Track</button>

    <!-- Submit Button -->
    <div class="mt-4">
        <button type="submit" class="btn btn-primary">Update</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="NavigateBack">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter] public int AlbumId { get; set; }
    private Album? album;
    private List<Artist> artists = new List<Artist>();
    private List<Track> tracks = new List<Track>();

protected override async Task OnInitializedAsync()
{
    album = await ChinookContext.Albums!
        .Include(a => a.Tracks) // Include tracks for the album
        .FirstOrDefaultAsync(a => a.AlbumId == AlbumId);

    if (album == null)
    {
        Console.WriteLine($"Error: Album with AlbumId={AlbumId} not found.");
        return;
    }

    Console.WriteLine($"Loaded album: {album.Title}, AlbumId: {album.AlbumId}");
    tracks = album.Tracks?.ToList() ?? new List<Track>();
    artists = await ChinookContext.Artists.ToListAsync();
}


private async Task HandleValidSubmit()
{
    if (album != null)
    {
        Console.WriteLine($"Updating Album: {album.Title}, AlbumId={album.AlbumId}");

        // Save the album
        ChinookContext.Albums.Update(album);

        foreach (var track in tracks)
        {
            if (track.TrackId == 0) // New tracks
            {
                if (track.AlbumId <= 0 || track.MediaTypeId <= 0 || track.GenreId <= 0)
                {
                    Console.WriteLine($"Error: Invalid foreign key(s) for track '{track.Name}' (AlbumId={track.AlbumId}, MediaTypeId={track.MediaTypeId}, GenreId={track.GenreId}). Skipping track.");
                    continue; // Skip invalid tracks
                }

                Console.WriteLine($"Adding new track: Name='{track.Name}', AlbumId={track.AlbumId}");
                ChinookContext.Tracks.Add(track); // Add new track
            }
            else
            {
                Console.WriteLine($"Updating track: Name='{track.Name}', TrackId={track.TrackId}, AlbumId={track.AlbumId}");
                ChinookContext.Tracks.Update(track); // Update existing tracks
            }
        }

        await ChinookContext.SaveChangesAsync(); // Commit changes to the database
        Console.WriteLine("Changes saved successfully.");
        NavigationManager.NavigateTo("/");
    }
}



private void AddTrack()
{
    if (album == null || album.AlbumId <= 0)
    {
        Console.WriteLine("Error: Cannot add a track because the AlbumId is invalid or the album is null.");
        return; // Prevent adding tracks if AlbumId is invalid
    }

    var newTrack = new Track
    {
        Name = "New Track",
        AlbumId = album.AlbumId, // Explicitly assign the current album's AlbumId
        MediaTypeId = 1, // Assign default valid MediaTypeId (adjust as needed)
        GenreId = 1      // Assign default valid GenreId (adjust as needed)
    };

    tracks.Add(newTrack);

    Console.WriteLine($"New track added: Name='{newTrack.Name}', AlbumId={newTrack.AlbumId}");
}






    private void RemoveTrack(Track track)
    {
        tracks.Remove(track);
        if (track.TrackId != 0)
        {
            ChinookContext.Tracks.Remove(track);
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }
}
